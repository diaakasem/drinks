// Generated by CoffeeScript 1.6.3
(function() {
  var controller;

  controller = function(scope, Item, Consumption) {
    var aDay, amonthAgo, buildLists, dayMS, end, indent, m;
    m = moment();
    dayMS = m.diff(moment().startOf('day'));
    scope.consumptionFilter = '';
    scope.tab = 'consumption';
    scope.items = [];
    scope.consumptions = [];
    scope.name = '';
    scope.tags = '';
    scope.tagsList = [];
    scope.namesList = [];
    buildLists = function(items) {
      _.each(items, function(e) {
        scope.tagsList.push(e.get('tags'));
        return scope.namesList.push(e.get('name'));
      });
      scope.tagsList = _.uniq(scope.tagsList);
      return scope.namesList = _.uniq(scope.namesList);
    };
    scope.remove = function(model) {
      return Item.remove(model, function() {
        return scope.$apply(function() {
          return scope.items = _.filter(scope.items, function(d) {
            return d.id !== model.id;
          });
        });
      });
    };
    scope.add = function() {
      var cb;
      cb = function(result) {
        return scope.$apply(function() {
          scope.items.unshift(result);
          scope.name = '';
          return scope.tags = '';
        });
      };
      return Item.add(cb, scope.name, scope.tags);
    };
    scope.showConsumptions = function(switchtab, cb) {
      if (switchtab == null) {
        switchtab = true;
      }
      if (switchtab) {
        scope.tab = 'consumption';
      }
      if (scope.consumptions.length > 0) {
        return typeof cb === "function" ? cb(scope.consumptions) : void 0;
      } else {
        return Consumption.list(new Date(now - dayMS), new Date(0), function(results) {
          return scope.$apply(function() {
            scope.consumptions = results;
            timeout(function() {
              return buildLists(results);
            });
            return typeof cb === "function" ? cb(results) : void 0;
          });
        });
      }
    };
    scope.showItems = function(switchtab, cb) {
      if (switchtab == null) {
        switchtab = true;
      }
      if (switchtab) {
        scope.tab = 'items';
      }
      if (scope.items.length > 0) {
        return typeof cb === "function" ? cb(scope.items) : void 0;
      } else {
        return Item.list(new Date(now - dayMS), new Date(0), function(results) {
          return scope.$apply(function() {
            scope.items = results;
            timeout(function() {
              return buildLists(results);
            });
            return typeof cb === "function" ? cb(results) : void 0;
          });
        });
      }
    };
    scope.isBar = true;
    amonthAgo = +(moment().subtract('days', 30).startOf('day'));
    aDay = 86400000;
    end = +(moment().add('days', 2).startOf('day'));
    scope.lastMonth = _.range(amonthAgo, end, aDay);
    indent = function(arr) {
      var a, day, i, index, lastMonth, _i, _len;
      lastMonth = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = scope.lastMonth.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(0);
        }
        return _results;
      })();
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        a = arr[_i];
        day = +(moment(a.createdAt).startOf('day'));
        index = _.indexOf(scope.lastMonth, day);
        if (!(index >= 0)) {
          continue;
        }
        lastMonth[index]++;
      }
      return lastMonth;
    };
    scope.c3BuildData = function(data) {
      var res;
      data = scope.items.concat(data);
      data = _.groupBy(data, function(d) {
        return d.get('tags');
      });
      res = _.map(data, function(v, k) {
        return [k].concat(indent(v));
      });
      return res;
    };
    scope.showReports = function() {
      return scope.tab = 'reports';
    };
    scope.filtered = function(e) {
      var regex;
      regex = new RegExp(".*" + scope.consumptionFilter + ".*", 'i');
      if (!scope.consumptionFilter) {
        return true;
      }
      return regex.test(e.get('name')) || regex.test(e.get('tags'));
    };
    scope["switch"] = function() {
      $('#chart').empty();
      scope.isBar = !scope.isBar;
      return scope.showReports();
    };
    $('#whatispomodoro').popover({});
    return $('.withtooltip').tooltip({});
  };

  angular.module('manageApp').controller('FitnessCtrl', ['$scope', 'Item', 'Consumption', controller]);

}).call(this);

/*
//@ sourceMappingURL=fitness.map
*/
