// Generated by CoffeeScript 1.6.3
(function() {
  var controller;

  controller = function(scope, Service, timeout) {
    var aDay, amonthAgo, buildLists, dayMS, indent, m, now, today;
    m = moment();
    dayMS = m.diff(moment().startOf('day'));
    scope.historyFilter = '';
    scope.tab = 'today';
    scope.entities = [];
    scope.history = [];
    scope.name = '';
    scope.tags = '';
    scope.tagsList = [];
    scope.namesList = [];
    buildLists = function(entities) {
      _.each(entities, function(e) {
        scope.tagsList.push(e.get('tags'));
        return scope.namesList.push(e.get('name'));
      });
      scope.tagsList = _.uniq(scope.tagsList);
      scope.namesList = _.uniq(scope.namesList);
      console.log(scope.tagsList);
      return console.log(scope.namesList);
    };
    now = new Date();
    Service.list(now, new Date(now - dayMS), function(results) {
      return scope.$apply(function() {
        scope.entities = results;
        return buildLists(results);
      });
    });
    scope.remove = function(model) {
      return Service.remove(model, function() {
        return scope.$apply(function() {
          return scope.entities = _.filter(scope.entities, function(d) {
            return d.id !== model.id;
          });
        });
      });
    };
    scope.add = function() {
      var cb;
      cb = function(result) {
        return scope.$apply(function() {
          scope.entities.unshift(result);
          scope.name = '';
          return scope.tags = '';
        });
      };
      return Service.add(cb, scope.name, scope.tags);
    };
    scope.onRemove = function(model) {
      return scope.remove(model);
    };
    scope.onChange = function(model) {
      return Service.update(model);
    };
    scope.onDone = function(model) {
      if (scope.continus) {
        scope.name = model.get('name');
        scope.tags = model.get('tags');
        return scope.add();
      }
    };
    scope.again = function(model) {
      scope.name = model.get('name');
      scope.tags = model.get('tags');
      return scope.add();
    };
    scope.showHistory = function(switchtab, cb) {
      if (switchtab == null) {
        switchtab = true;
      }
      if (switchtab) {
        scope.tab = 'history';
      }
      if (scope.history.length > 0) {
        return typeof cb === "function" ? cb(scope.history) : void 0;
      } else {
        return Service.list(new Date(now - dayMS), new Date(0), function(results) {
          return scope.$apply(function() {
            scope.history = results;
            timeout(function() {
              return buildLists(results);
            });
            return typeof cb === "function" ? cb(results) : void 0;
          });
        });
      }
    };
    scope.isBar = true;
    scope.buildGraph = function(data) {
      var chart;
      d3.select('svg g').remove();
      data = scope.buildData(scope.isBar, data);
      if (scope.isBar) {
        chart = nv.models.multiBarChart();
      } else {
        chart = nv.models.cumulativeLineChart().x(function(d) {
          return d[0];
        }).y(function(d) {
          return d[1];
        }).clipEdge(true);
      }
      chart.xAxis.axisLabel('Dates').tickFormat(function(d) {
        return moment(d).format('MMM Do');
      });
      chart.yAxis.axisLabel('Pomodoris').tickFormat(d3.format(",.1f"));
      d3.select("#reports svg").datum(data).transition().duration(500).call(chart);
      nv.utils.windowResize(chart.update);
      return chart;
    };
    scope.buildData = function(isBar, historyData) {
      var data;
      data = scope.entities.concat(historyData);
      data = _.groupBy(data, function(d) {
        return d.get('tags');
      });
      data = _.map(data, function(arr, tag) {
        var days, v;
        days = _.groupBy(arr, function(d) {
          return moment(d.createdAt).startOf('day').unix() * 1000;
        });
        v = _.map(days, function(pomodoros, day) {
          var count;
          count = pomodoros ? pomodoros.length : 0;
          day = parseInt(day);
          if (isBar) {
            return {
              x: day,
              y: count
            };
          } else {
            return [day, count];
          }
        });
        v = _.sortBy(v, function(d) {
          var ret;
          ret = isBar ? d.x : d[0];
          return ret;
        });
        return {
          key: tag,
          values: v
        };
      });
      data = _.sortBy(data, 'key');
      return data;
    };
    amonthAgo = +(moment().subtract('days', 31).startOf('day'));
    aDay = 86400000;
    today = +(moment().startOf('day')) + aDay;
    scope.lastMonth = _.range(amonthAgo, today, aDay);
    indent = function(arr) {
      var a, day, i, index, lastMonth, _i, _len;
      lastMonth = (function() {
        var _i, _ref, _results;
        _results = [];
        for (i = _i = 0, _ref = scope.lastMonth.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          _results.push(0);
        }
        return _results;
      })();
      for (_i = 0, _len = arr.length; _i < _len; _i++) {
        a = arr[_i];
        day = +(moment(a.createdAt).startOf('day'));
        index = _.indexOf(scope.lastMonth, day);
        if (!(index >= 0)) {
          continue;
        }
        lastMonth[index]++;
      }
      return lastMonth;
    };
    scope.c3BuildData = function(historyData) {
      var data, res;
      data = scope.entities.concat(historyData);
      data = _.groupBy(data, function(d) {
        return d.get('tags');
      });
      res = _.map(data, function(v, k) {
        return [k].concat(indent(v));
      });
      return res;
    };
    scope.showReports = function() {
      var graph;
      scope.tab = 'reports';
      graph = function(historyData, type) {
        var chart, data;
        if (type == null) {
          type = "bar";
        }
        data = scope.c3BuildData(historyData);
        return chart = c3.generate({
          data: {
            columns: data,
            types: _.zipObject(_.map(data, function(d) {
              return [d[0], type];
            })),
            groups: [
              _.map(data, function(d) {
                return d[0];
              })
            ]
          },
          axis: {
            x: {
              type: "categorized"
            }
          }
        });
      };
      if (scope.history.length > 0) {
        return graph(scope.history);
      } else {
        return scope.showHistory(false, graph);
      }
    };
    scope.filtered = function(e) {
      var regex;
      regex = new RegExp(".*" + scope.historyFilter + ".*", 'i');
      if (scope.historyFilter) {
        return regex.test(e.get('name'));
      }
      return true;
    };
    $('#whatispomodoro').popover({});
    return $('.withtooltip').tooltip({});
  };

  angular.module('manageApp').directive('pomodorolist', function() {
    return {
      templateUrl: "views/directives/pomodorolist.html",
      restrict: 'E',
      scope: true,
      controller: ['$scope', 'Pomodoro', '$timeout', controller]
    };
  });

}).call(this);

/*
//@ sourceMappingURL=pomodorolist.map
*/
